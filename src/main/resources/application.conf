
akka {
    # 부팅 시 등록할 Logger (akka.event.Logging$DefaultLogger logs to STDOUT)

    # 애플리케이션의 다양한 실행 환경(예: 개발, 대기, 실제 운영에)에 따른 설정 값을 정의
    # 각 환경에 대해 다른 설정 값을 적용함으로써, 같은 애플리케이션이라도 환경에 맞게 동작하도록 구성
    environment = {
        # 실제 운영 환경에서 사용될 설정
        service : {
            # 채팅방이 활성 상태로 유지되어야 하는 최대 시간을 의미
            chatroom-receive-timeout = 10800 # 3 Hour
            redis-ip = "127.0.0.1"
            redis-port = 6379
        }

        # 개발 환경에서 사용될 설정
        dev : {
            # 개발 시 테스트 목적으로 더 짧은 시간동안 채팅방을 열어두기 위한 설정
            chatroom-receive-timeout = 1800
            redis-ip = "127.0.0.1"
            redis-port = 6379
        }

        # publish/subscribe 메시징을 위한 채널의 접두사와 접미사를 설정
        # 메시지 채널의 이름을 구성할 때 사용되며, 특정 패턴을 가진 채널 이름을 통해 메시지를 구독하거나 발행할 때 유용
        pubsub-channel : {
            prefix = "#chatka/"
            postfix = "#"
        }
    }

    # 애플리케이션 부팅 시 등록할 로거를 지정
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    # 설정된 로거가 시작된 후 사용될 로그 레벨을 지정
    # DEBUG 레벨은 애플리케이션의 상세한 동작 정보를 로깅하도록 설정되어 있음, 개발 중이나 문제 해결 시 유용
    loglevel = "DEBUG"

    # 액터 시스템이 시작하는 동안 활성화되는 기본 로거의 로그 레벨을 설정
    # INFO 레벨은 중요한 운영 메시지를 로깅하도록 설정되어 있음, 애플리케이션의 일반적인 상태 정보를 제공
    stdout-loglevel = "INFO"

    # 로깅할 수 있는 "죽은 편지"의 최대 수를 지정
    # Dead Letters는 수신자가 없거나 처리할 수 없는 메시지를 의미
    # 이 값은 애플리케이션에서 메시지 전달 문제를 진단하는 데 유용
    log-dead-letters = 10

    # 애플리케이션 종료 시 처리되지 않은 메시지(Dead Letters)의 로깅을 비활성화
    log-dead-letters-during-shutdown = off

    # 로그 이벤트를 이벤트 스트림에 게시하기 전에 사용될 로깅 필터를 지정
    # 이 필터는 로그 레벨이나 특정 조건에 따라 로그 이벤트를 필터링하는데 사용될 수 있음
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    # Akka 애플리케이션에서 액터들이 실행될 때 사용되는 기본 디스패서(dispatcher)에 대한 구성을 정의
    # dispatcher는 액터 모델을 구현할 때 중요한 개념 중 하나로, 액터에게 메시지를 전달하는 역할을 담당하며,
    # 이 과정에서 다양한 실행 모델(execution models)을 사용할 수 있다.
    actor {
        default-dispatcher {
            # dispatcher의 유형을 지정
            # `Dispatcher`: Akka에서 사용할 수 있는 일반적인 디스패처
            type = Dispatcher

            # 실제로 작업을 실행할 때 사용할 실행자(executor)의 유형을 지정
            # `thread-pool-executor`: 스레드 풀을 사용해 액터의 메시지 처리를 병렬로 실행하는 실행자 유형
            executor = "thread-pool-executor"

            thread-pool-executor {
                # 스레드 풀의 최소 크기를 지정
                # 최소 8개의 스레드가 항상 활성 상태로 유지
                core-pool-size-min = 8

                # 사용 가능한 프로세서(코어) 수에 곱해질 배수를 지정
                # 시스템의 사용 가능한 코어 수의 2배만큼의 스레드가 코어 풀 크기로 설정
                core-pool-size-factor = 2.0

                # 스레드 풀의 최대 크기를 지정
                # 스레드 풀 크기가 최대 32까지 확장될 수 있음
                core-pool-size-max = 32
            }

            # 디스패처가 다른 액터로 전환하기 전에 한 액터가 처리할 수 있는 최대 메시지 수를 정의
            # 한 액터가 최대 100개의 메시지를 처리한 후에 스레드가 다른 액터로 전환될 것임을 의미
            # 이 값이 낮으면 액터 간의 전환 빈도가 높아져 공평한 처리 시간 분배를 유도할 수 있지만,
            # 컨텍스트 스위칭이 빈번해져 성능이 저하될 수 있음. 반대로 값이 높으면 특정 액터가 연속적으로
            # 많은 메시지를 빠르게 처리할 수 있게 되지만, 다른 액터들은 처리를 기다려야 할 수 있음
            throughput = 100
        }
    }

    # Akka Streams의 materializer와 관련된 세부 설정
    # Akka Streams에서 materializer는 스트림 그래프를 실행 가능한 형태로 변환하는 컴포넌트
    # 각 설정 항목은 스트림 처리의 성능과 안정성에 영향을 미치는 중요한 설정
    stream {
        materializer {
            # 스트림 요소가 사용하는 버퍼의 초기 크기를 설정
            # 스트림 처리 시작 시 각 스테이지의 입력 버퍼 크기를 8로 설정
            initial-input-buffer-size = 8

            # 스트림 요소가 사용할 수 있는 버퍼의 최대 크기를 설정
            # 입력 버퍼가 최대 32까지 확장될 수 있음을 의미
            max-input-buffer-size = 32

            # Actor Materializer가 Actor를 생성할 때 사용할 dispatcher의 구성 경로를 지정
            # 값이 비어 있으면 default-dispatcher가 사용됨
            dispatcher = "akka.actor.default-dispatcher"

            # 구독이 주어진 시간 내에 사용되지 않을 경우, 발행자(publisher)와 구독자(subscriber)를 정리하는 방식을 정의
            # `cancel` 모드는 타임아웃에 도달하면 구독을 취소하고, `warn`은 경고 로그를 남기며, `noop`은 아무 조치도 취하지 않음(권장되지 않음)
            subscription-timeout {
                mode = cancel
                timeout = 5s
            }

            # 디버그 로깅을 활성화할지 여부를 설정
            debug-logging = off

            # 하류(downstream)에서 큰 수요를 신호할 경우 한 번에 배출할 수 있는 요소의 최대 수를 설정
            output-burst-limit = 1000

            # 모든 그래프가 실행될 때 자동으로 퓨징(fusing, 여러 스테이지를 단일 액터로 병합하는 과정)을 활성화할지 여부를 설정
            # Akka 2.5.0부터는 이 설정이 효과가 없어서, 더 이상 사용되지 않음.
            auto-fusing = on

            # 명시적으로 버퍼를 가진 스트림 요소들이 스트림 머티리얼라이징 시 미리 고정된 버퍼를 할당받는 최대 크기를 설정
            max-fixed-buffer-size = 1000

            # 스트림 내에서 액터 간 동기 메시지 처리의 최대 수를 설정
            # 스트림 내부의 메시지 처리 속도를 가속화하면서도 시스템의 반응성을 유지하는 데 도움을 줌
            sync-processing-limit = 1000

            # 테스트 목적으로 설계된 설정으로, 연산의 순서를 공격적으로 재정렬하고 특정 작업을 보다 동시에 수행함으로써 레이스 컨디션의 가능성을 증가시키는 설정
            # 이 설정은 프로덕션 환경에서는 절대 활성화해서는 안 되며, 디스패처의 처리량(throughput)을 1로 설정하여 최상의 결과를 얻을 수 있음
            debug {
                fuzzing-mode = off
            }
        }
    }

    # Akka HTTP 서버의 연결 유지 관리와 관련된 설정
    http {
        server {
            # 서버 측에서 활동 없는 연결을 얼마 동안 유지한 후 자동으로 닫을지를 결정하는 시간
            # 연결이 60초 동안 아무런 데이터 교환 없이 유지되면 자동으로 닫히게 됨
            idle-timeout = 60s

            # 웹소켓 연결이 오랫동안 안정적으로 유지되도록 하는 설정
            # 특히 실시간 통신을 구현하는 웹 애플리케이션에서 중요한 설정
            # 클라이언트와 서버 사이의 연결이 중간에 끊기지 않도록 하며, 네트워크 상태가 변하더라도 연결을 유지할 수 있게 함
            websocket {
                # 주기적으로 keep-alive 메시지를 보내는 시간 간격
                # 연결이 최대 10초 동안 아무런 활동 없이 유지될 때마다 keep-alive 메시지를 보내 연결을 유지하게 됨
                periodic-keep-alive-max-idle = 10s

                # 웹소켓 연결을 활성 상태로 유지하기 위해 서버에서 주기적으로 보내는 keep-alive 메시지의 유형을 설정
                # pong: 서버가 pong 메시지를 주기적으로 보내어 단방향 keep-alive 매커니즘을 구현하는 방식, 이는 연결이 여전히 살아있음을 확인하는 데 사용
                periodic-keep-alive-mode = pong
            }
        }

        client {
            # 활동이 없는 상태에서 연결이 자동으로 닫히기까지의 시간을 정의
            # 연결이 60초 동안 아무런 데이터 교환 없이 유지되면 자동으로 연결이 닫힌다는 것을 의미
            idle-timeout = 60s

            # TCP 연결 과정이 완료되어야 하는 시간
            # 클라이언트가 서버에 연결을 시도할 때 1분 이내에 연결이 성립되어야 함을 의미
            # 이 시간을 초과하면 연결이 실패하고, 타임아웃 에러가 발생할 수 있다.
            connecting-timeout = 60s

            # 웹소켓 연결의 유지 관리에 관한 설정
            # 실시간 통신이 중요한 애플리케이션에서 중요한 설정
            # TCP 연결의 안정성을 높이고, 웹소켓 연결을 오랜 시간 동안 안정적으로 유지하는 데 사용
            websocket {
                # 주기적 keep-alive 메시지를 보내는 시간 간격
                # 연결이 최대 10초간 아무런 활동 없이 유지되면 keep-alive 메시지를 보내서 연결이 여전히 활성 상태임을 확인한다는 것을 의미
                periodic-keep-alive-max-idle = 10s

                # 웹소켓 연결을 활성 상태로 유지하기 위해 주기적으로 보내는 keep-alive 메시지의 유형을 설정
                # ping: 양방향 ping/pong keep-alive heartbeat 메시지로, 상대방은 ping 메시지를 받은 후 pong 메시지로 응답해야 함
                # pong: 단방향 pong keep-alive heartbeat 메시지로, 주로 서버 측에서 클라이언트의 연결 상태를 확인하는 데 사용
                periodic-keep-alive-mode = pong
            }
        }

        host-connection-pool {
            # 연결 풀에 연결되는 최대 병렬 연결 수
            max-connections = 10

            # 전체 풀에서 최대 열린 요청 수
            max-open-requests = 32

            # 실패한 요청이 재시도되는 최대 횟수
            max-retries = 3

            # 연결이 유휴 상태로 간주되기 전에 대기하는 시간
            idle-timeout = 30s

            # 연결 풀의 구현 방식을 선택하는 옵션
            # new: Akka HTTP 10.1.0 이후에 추가된 새로운 구현 방식
            pool-implementation = new

            # 응답 엔티티가 디스패치된 후 구독되지 않은 경우, 연결을 조기에 실패시키고 슬롯을 클리어하는 시간
            # 너무 짧으면, 시스템이 바쁠 때 응답을 빠르게 처리하지 못해 연결이 불필요하게 실패할 수 있음
            response-entity-subscription-timeout = 10s
        }
    }

}